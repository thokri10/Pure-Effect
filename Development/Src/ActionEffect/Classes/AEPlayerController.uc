// THIS CLASS IS RESPONSIBLE FOR CONTROLLING THE PLAYER'S CHARACTER.
class AEPlayerController extends UTPlayerController
	dependson(AEJSONParser);

//-----------------------------------------------------------------------------
// Classes

// Character that the player controls.
var AEPawn_Player           myPawn;

// Network module used to gain weapon info from server.
var AETcpLinkClient         myTcpLink;

// All parsing goes trough this class
var class<AEJSONParser>     pars;
var AEJSONParser            parser;

// HudMenu
var AEHUDMenu               myMenu;
// Print out our textmenu on the screen
var AEHUD                   mHUD;

// Mission module that initialize mission and spawns it's objectives.
var AEMissionObjective      myMissionObjective;

// Inventory for different items we are using
var AEInventory             myItemInventory;

// Responsible for generating weapons.
var AEWeaponCreator         myWeaponCreator;


//-----------------------------------------------------------------------------
// Vriables

var HudLocalizedMessage     message;
var int                     credits;

var string test;


//-----------------------------------------------------------------------------
// Events 

/** Initializations before any pawns spawn on the map. */
simulated event PostBeginPlay()
{
	// Initializations of various variables.
	super.PostBeginPlay();

	myTcpLink = Spawn(class'AETcpLinkClient');
	myTcpLink.PC = self;

	myWeaponCreator = Spawn(class'AEWeaponCreator');
	myWeaponCreator.PC = self; 

	myMissionObjective = Spawn(class'AEMissionObjective');
	myMissionObjective.PC = self;

	myItemInventory = Spawn(class'AEInventory');
	myItemInventory.PC = self;
	myItemInventory.AddItem(Spawn(class'AEInventory_Item_HealthPack'));
	myItemInventory.AddItem(Spawn(class'AEInventory_Item_Granade'));

	myMenu = Spawn(class'AEHUDMenu');
	myMenu.PC = self;

	parser = new pars;

	// Connect to server.
	//myTcpLink.ResolveMe();

}

function Tick(float DeltaTime)
{
	if (myHUD != none)
	{
		if (mHUD == none)
		{
			mHUD = AEHUD( myHUD );
		}
	}
}


//-----------------------------------------------------------------------------
// Inventory 

/** Puts a weapon to your intventory */
function addWeaponToInventory(UTWeapon weap)
{
	myPawn.AddWeaponToInventory( weap );
}


//-----------------------------------------------------------------------------
// Console commands

/** Temp menu command */
exec function ppp()
{
	mHUD = AEHUD( myHUD );
	myMenu.setMainMenu();
}

/** Login with username and password */
exec function logIn(string user, optional string password)
{
	if (mHUD == none)
	{
		mHUD = AEHUD(myHUD);
	}

	myTcpLink.logIn(user, password);
	mHUD.postError("Logging in...");
}

/** Generates a weapon. */
exec function getWeapon(string type, float spread, int magazineSize, float reloadTime, float damage, float speed)
{
	local UTWeapon wep;
	wep = myWeaponCreator.CreateWeapon(type, spread, magazineSize, reloadTime, damage, speed);

	if (wep != none)
	{
		AddWeaponToInventory( wep );
	}
}

/** Generates a weapon generated by information from the server. */
exec function getServerWeapon(int id)
{
	myTcpLink.getWeapon(id);
}

/** Uses item with spesified inventory slot */
exec function UseItem(int slot)
{
	if (mHUD == none)
	{
		mHUD = AEHUD(myHUD);
	}
	myItemInventory.Use(slot);
}


DefaultProperties
{
	InputClass = class'AEPlayerInput'
	pars = class'AEJSONParser'

}